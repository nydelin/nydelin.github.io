{"version":3,"sources":["componentes/Header.js","componentes/Formulario.js","componentes/Error.js","componentes/Clima.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","href","titulo","Formulario","ciudadRef","React","createRef","paisRef","buscarClima","e","preventDefault","respuesta","ciudad","_this","current","value","pais","datosConsulta","onSubmit","this","id","type","ref","htmlFor","defaultValue","Component","Error","mensaje","Clima","mostrarResultado","_this$props$resultado","resultado","name","weather","main","urlIcono","concat","icon","temp","toFixed","src","alt","temp_max","temp_min","App","state","error","consulta","consultarApi","_this$state$consulta","url","fetch","then","json","datos","setState","catch","console","log","prevProps","prevState","cod","componentes_Error","componentes_Clima","componentes_Header","componentes_Formulario","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4483133b.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Header = (props) => {\r\n    return(\r\n        <div>\r\n            <nav>\r\n                <div className=\"nav-wrapper light-blue darken2\">\r\n                    <a href=\"/\" className=\"brand-logo\">{props.titulo}</a>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\n\r\nHeader.propTypes ={\r\n    titulo: PropTypes.string.isRequired\r\n}\r\nexport default Header;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Formulario extends Component {\r\n    //crear los ref\r\n    ciudadRef= React.createRef();\r\n    paisRef= React.createRef();\r\n\r\n    buscarClima = (e) =>{\r\n        e.preventDefault();\r\n        //leer los refs y crear el objeto\r\n        const respuesta =  {\r\n            ciudad: this.ciudadRef.current.value,\r\n            pais: this.paisRef.current.value\r\n\r\n        }\r\n        //console.log(respuesta)\r\n        //enviar props\r\n        this.props.datosConsulta(respuesta);\r\n        //opcional resestear el form\r\n    }\r\n    render() { \r\n        return (\r\n         <div className=\"contenedor-form\">\r\n            <div className='container'>\r\n                <div className=\"row\">\r\n                    <form onSubmit={this.buscarClima}>\r\n                        <div className=\"input-field col s12 m8 14 offset-m2\">\r\n                            <input id=\"ciudad\" type=\"text\" ref={this.ciudadRef}/>\r\n                            <label htmlFor=\"ciudad\">Ciudad:</label>\r\n                        </div>\r\n                        <div className=\"input-field col s12 m8 14 offset-m2\">\r\n                            <select ref={this.paisRef}>\r\n                                <option value=\"\" defaultValue>Elige un país</option>\r\n                                <option value=\"AR\" defaultValue>Argentina</option>\r\n                                <option value=\"CO\" defaultValue>Colombia</option>\r\n                                <option value=\"CR\" defaultValue>Costa Rica</option>\r\n                                <option value=\"ES\" defaultValue>España</option>\r\n                                <option value=\"US\" defaultValue>Estados Unidos</option>\r\n                                <option value=\"MX\" defaultValue>México</option>\r\n                                <option value=\"PE\" defaultValue>Perú</option>\r\n                            </select>\r\n                            <label htmlFor=\"pais\">País</label>\r\n                        </div>\r\n                        <div className=\"input-field col s12 m8 l4 offset-2 buscador\">\r\n                            <input type=\"submit\" className=\"waves-effect waves-light btn-large yellow accent-4\" value=\"Buscar...\" />\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n         </div>\r\n\r\n          );\r\n    }\r\n}\r\n\r\nFormulario.propTypes ={\r\n    datosConsulta: PropTypes.func.isRequired\r\n}\r\n \r\nexport default Formulario;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Error = (props) => {\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <div className=\"col s12 m6 offset-m3\">\r\n                    <div className=\"card-panel red darken-4 errpr\">\r\n                        {props.mensaje}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n      );\r\n}\r\n\r\nError.propTypes ={\r\n    mensaje: PropTypes.string.isRequired\r\n}\r\n \r\nexport default Error;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Clima extends Component {\r\n\r\n    mostrarResultado = () =>{\r\n        //obtener los datos de la consulta\r\n        const {name, weather, main} = this.props.resultado;\r\n        \r\n        if(!name || !weather || !main) return null; //si en la respuesta no hay un nombre\r\n                                //salimos de la ejecucion de la funcion\r\n\r\n        const kelvin = 273.15;\r\n        const urlIcono=`http://openweathermap.org/img/w/${weather[0].icon}.png`;\r\n        const infoNomuestra=`Clima de ${name}`;\r\n        \r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"resultado col s12 m8 16 offset-m2 offset-l3\">\r\n                    <div className=\"card-panel light-blue align-center\">\r\n                        <span className=\"white-text\">\r\n                            <h2>Resultado Clima de: {name}</h2>\r\n                            <p className=\"temperatura\">\r\n                                Actual: {(main.temp - kelvin).toFixed(2)} &deg;C\r\n                                <img src={urlIcono} alt=\"infoNomuestra\" />\r\n                            </p>\r\n                            <p>Max. {(main.temp_max - kelvin).toFixed(2)} &deg;C</p>\r\n                            <p>Min. {(main.temp_min - kelvin).toFixed(2)} &deg;C</p>\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n  \r\n    render() { \r\n        return ( \r\n            <div className=\"container\">\r\n               {this.mostrarResultado()}\r\n            </div>\r\n         );\r\n    }\r\n}\r\n\r\nClima.propTypes ={\r\n    resultado: PropTypes.object.isRequired\r\n}\r\n \r\nexport default Clima;","import React, { Component } from 'react';\nimport Header from './componentes/Header';\nimport Formulario from './componentes/Formulario';\nimport Error from './componentes/Error';\nimport Clima from './componentes/Clima';\n\nclass App extends Component {\n\n  state= {\n    error: '',\n    consulta: {},\n    resultado: {}\n  }\n  //para prevenir que en cada cambio minusculo interno se actualice se le\n  //colocan dos argumentos, para comprobar si el estate o props \n  //a cambiado o no\n  componentDidUpdate(prevProps, prevState){\n    \n    if(prevState.consulta !== this.state.consulta){\n      this.consultarApi();\n    }\n    \n  }\n\n  componentDidMount(){\n    this.setState({\n      error:false\n    })\n  }\n\n  consultarApi = () =>{\n    const {ciudad, pais} = this.state.consulta;\n    if(!ciudad || !pais) return null;\n    //console.log (ciudad);\n\n    //leer la url y agregar el API key\n\n    const appID = \"b0e0b789175b6ea01613cfc5f887a400\";\n    let url=`https://api.openweathermap.org/data/2.5/weather?q=${ciudad},${pais}&appid=${appID}`\n      //console.log(url);\n    \n    //query con fetch api no requiere que carges una libreria como\n    //ajax axios o jquery ajax\n    fetch(url)\n    .then(respuesta =>{\n        //console.log(respuesta); //regresa como codigo JSON la url y demas datos\n        return respuesta.json();\n    })\n     .then(datos => {\n      //console.log(datos);//regresa el codigo json o los datos sobre el clima\n      this.setState({\n        resultado: datos\n      })\n    })\n    .catch(error => {\n      console.log(error) //para poder debugear en caso de que haya error\n    })\n\n  }\n\n  datosConsulta = (respuesta) =>{\n    if(respuesta.ciudad ==='' || respuesta.pais === ''){\n      this.setState({\n        error:true\n      })\n    } else{\n      this.setState({\n        error: false,\n        consulta: respuesta\n      })\n     // console.log(respuesta)\n    }\n  }\n\n  render() {\n    \n    const {error} = this.state;\n    //cod es el codigo que manda la api y contiene un numero si es 404\n    //quiere decir que no encontro la ciudad\n    const {cod} = this.state.resultado;\n    //console.log(error);\n    let resultado; //dr muestra abajo de formulario en el return\n    if(error){\n      resultado = <Error mensaje=\"Ambos campos son obligatorios\" />\n    } else if(cod === '404'){\n      resultado = <Error mensaje=\"Ciudad no Encontrada\" />\n    } else {\n      resultado = <Clima resultado={this.state.resultado}/>\n    }\n\n    return (\n      <div className=\"app\">\n        <Header \n          titulo=\"Clima React\"\n        />\n        <Formulario \n          datosConsulta={this.datosConsulta}\n        />\n        {resultado}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}